{{- $indexingStrategy := include "primary-site.indexingStrategy" . }}
{{- $values :=  include "primary-site.mergedQueryServiceValues" . | fromYaml -}}
{{- $deploymentAndAppName := (ternary "stream-server" "query-server" $values.useLegacyDeploymentName) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploymentAndAppName }}
  labels:
    app: {{ $deploymentAndAppName }}
spec:
  replicas: {{ $values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ $deploymentAndAppName }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ $deploymentAndAppName }}
        {{- range $key, $value := $values.deployment.podLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      annotations:
        {{- range $key, $value := $values.deployment.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      volumes:
        - name: cloud-credentials
          secret:
            secretName: gcp-cloud-credential
            optional: true
      {{- if $values.deployment.extraVolumes }}
        {{- toYaml $values.deployment.extraVolumes | nindent 8 }}
      {{- end }}
      {{- if $values.deployment.initContainers }}
      initContainers:
        {{- toYaml $values.deployment.initContainers | nindent 8 }}
      {{- end }}
      containers:
        - name: query-service
          image: {{ $values.deployment.image }}:{{ .Chart.AppVersion }}
          resources:
            requests:
              cpu: {{ $values.deployment.resources.requests.cpu }}
              memory: {{ $values.deployment.resources.requests.memory }}
            limits:
              cpu: {{ $values.deployment.resources.limits.cpu }}
              memory: {{ $values.deployment.resources.limits.memory }}
          ports:
            - name: http
              containerPort: 8080
            - name: metrics
              containerPort: 6001
          volumeMounts:
            - mountPath: /secrets
              name: cloud-credentials
          {{- if $values.deployment.extraVolumeMounts }}
            {{- toYaml $values.deployment.extraVolumeMounts | nindent 12 }}
          {{- end }}
          envFrom:
            - secretRef:
                name: cloud-credentials
                optional: true
            - secretRef:
                name: foxglove-site-token
                optional: true
            {{- range $k := .Values.globals.secrets }}
            - secretRef:
                name: {{ $k }}
            {{- end }}
          env:
            {{- with lookup "v1" "Secret" .Release.Namespace "gcp-cloud-credential" }}
            ## The lookup is required here. The pod may have access to GCP through other means, but
            ## the credentials in this env var take precedence, even if it's empty. An empty variable
            ## essentially blocks GCP access.
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /secrets/credentials.json
            {{ end }}
            {{- if .Values.globals.proxy.enabled }}
            - name: HTTP_PROXY
              value: {{ .Values.globals.proxy.httpProxy }}
            - name: HTTPS_PROXY
              value: {{ .Values.globals.proxy.httpsProxy }}
            - name: NO_PROXY
              value: {{ .Values.globals.proxy.noProxy }}
            {{- end }}
            - name: FOXGLOVE_API_URL
              value: "{{ .Values.globals.foxgloveApiUrl }}"
            {{- if .Values.globals.siteToken }}
            - name: FOXGLOVE_SITE_TOKEN
              valueFrom:
                secretKeyRef:
                  name: foxglove-site
                  key: token
                  optional: false
            {{- end }}
            - name: PORT
              value: "8080"
            - name: AWS_REGION
              value: "{{ .Values.globals.aws.region }}"
            - name: AWS_SDK_LOAD_CONFIG
              value: "true"
            - name: SITE_INDEXING_STRATEGY
              value: "{{ $indexingStrategy }}"
            {{- if eq $indexingStrategy "split-files" }}
            - name: LAKE_STORAGE_PROVIDER
              value: "{{ .Values.globals.lake.storageProvider }}"
            - name: INBOX_STORAGE_PROVIDER
              value: "{{ .Values.globals.inbox.storageProvider }}"
            - name: STORAGE_INBOX_BUCKET_NAME
              value: "{{ .Values.globals.inbox.bucketName }}"
            {{- else if eq $indexingStrategy "index-in-place" }}
            - name: LAKE_STORAGE_PROVIDER
              value: "{{ .Values.globals.indexInPlace.storageProvider }}"
            {{- end }}
            - name: STORAGE_AZURE_STORAGE_ACCOUNT_NAME
              value: "{{ .Values.globals.azure.storageAccountName }}"
            - name: STORAGE_AZURE_SERVICE_URL
              value: "{{ .Values.globals.azure.serviceUrl }}"
            - name: PROMETHEUS_METRICS_NAMESPACE
              value: "{{ $values.deployment.metrics.namespace }}"
            - name: PROMETHEUS_METRICS_SUBSYSTEM
              value: "{{ $values.deployment.metrics.subsystem }}"
            - name: PRIMARY_SITE_VERSION
              value: "{{ .Chart.Version }}"
            {{- range $item := $values.deployment.env }}
            - name: {{ $item.name }}
              value: {{ $item.value | quote}}
            {{- end }}
          startupProbe:
            httpGet:
              port: 8080
              path: "/liveness"
            # Ping every second until ready, up to 30s.
            initialDelaySeconds: 0
            periodSeconds: 1
            timeoutSeconds: 1
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /liveness
              port: 8080
            periodSeconds: 3
            timeoutSeconds: 1
            failureThreshold: 10
          livenessProbe:
            httpGet:
              path: /liveness
              port: 8080
            periodSeconds: 3
            timeoutSeconds: 1
            failureThreshold: 20
      terminationGracePeriodSeconds: 30
      {{- if $values.deployment.serviceAccount.enabled }}
      serviceAccount: query-service
      {{- end}}
      {{- if $values.deployment.nodeSelectors }}
      nodeSelector:
        {{- range $key, $value := $values.deployment.nodeSelectors }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end}}
